# SPDX-FileCopyrightText: 2023 Enapter <developers@enapter.com>
# SPDX-License-Identifier: Apache-2.0

set enapter_root="$root"

# if file force_boot.txt exists on any disk (usually usb stick) then force boot from it
search --file --set=force_boot_disk /force_boot.txt

if [ -n "$force_boot_disk" ]; then
  set enapter_root="$force_boot_disk"
fi

export enapter_root

if loadfont ($enapter_root)/EFI/BOOT/unicode.pf2 ; then
  insmod all_video
  insmod gfxterm
  terminal_output gfxterm
fi

set menu_color_normal=white/black
set menu_color_highlight=black/light-gray

set default=0
set fallback=1
set timeout=2

set env_path="($enapter_root)/EFI/BOOT/grubenv"

if [ -s $env_path ]; then
  load_env --file $env_path
  insmod increment

  if [ "${boot_success}" == "-1" ]; then
    set boot_success=0
    save_env --file $env_path boot_success
  fi

  # Check if enapter_systemd_machine_id is set
  if [ -n "${enapter_systemd_machine_id}" ]; then
    set systemd_bootargs="systemd.machine_id=${enapter_systemd_machine_id}"
  fi

   # Check if boot_counter exists and boot_success=0 to activate this behaviour.
  if [ -n "${boot_counter}" -a "${boot_success}" == "0" ]; then
    # if countdown has ended, choose to boot rollback deployment,
    # i.e. default=1
    if  [ "${boot_counter}" == "0" -o "${boot_counter}" == "-1" ]; then
      set default=1
      set boot_counter=-1
    else
      # otherwise decrement boot_counter
      decrement boot_counter
    fi

    save_env --file $env_path boot_counter
  fi
fi

probe --part-uuid --set=boot_part_uuid $enapter_root

set common_params="root=PARTUUID=${boot_part_uuid} panic=20 ${systemd_bootargs} rauc.external"
export common_params

menuentry 'Enapter Linux' {
echo 'Loading Linux Kernel ...'
linux ($enapter_root)/EFI/enapter/bzImage $common_params
echo 'Loading initial ramdisk ...'
initrd ($enapter_root)/EFI/enapter/initrd
}

menuentry 'Enapter Linux (Backup)' {
kernel_path=($enapter_root)/EFI/enapter/bzImage
if [ -s ($enapter_root)/EFI/enapter/bzImage.backup ]; then
  kernel_path=($enapter_root)/EFI/enapter/bzImage.backup
fi
echo "Loading $kernel_path ..."
linux $kernel_path $common_params nomodeset usebackup

initrd_path=($enapter_root)/EFI/enapter/initrd
if [ -s ($enapter_root)/EFI/enapter/initrd.backup ]; then
  initrd_path=($enapter_root)/EFI/enapter/initrd.backup
fi
echo "Loading $initrd_path ..."
initrd $initrd_path
}

menuentry 'UEFI Firmware Settings' {
fwsetup
}

submenu 'Advanced Options for Enapter Linux' {

menuentry 'Enapter Linux (Safe Graphics)' {
echo 'Loading Linux Kernel ...'
linux ($enapter_root)/EFI/enapter/bzImage $common_params nomodeset
echo 'Loading initial ramdisk ...'
initrd ($enapter_root)/EFI/enapter/initrd
}

menuentry 'Enapter Linux (Password Reset)' {
echo -n "Are you sure you want to perform password reset? (y/N): "
read confirmation

if [ "$confirmation" != "y" -a "$confirmation" != "Y" ]; then
  echo "Action canceled. Rebooting..."
  sleep --verbose 3
  reboot
fi

echo 'Loading Linux Kernel ...'
linux ($enapter_root)/EFI/enapter/bzImage $common_params password_reset
echo 'Loading initial ramdisk ...'
initrd ($enapter_root)/EFI/enapter/initrd
}

menuentry 'Enapter Linux (Factory Reset)' {
echo -n "Are you sure you want to perform factory reset? (y/N): "
read confirmation

if [ "$confirmation" != "y" -a "$confirmation" != "Y" ]; then
  echo "Action canceled. Rebooting..."
  sleep --verbose 3
  reboot
fi

echo 'Loading Linux Kernel ...'
linux ($enapter_root)/EFI/enapter/bzImage $common_params factory_reset
echo 'Loading initial ramdisk ...'
initrd ($enapter_root)/EFI/enapter/initrd
}

menuentry 'Enapter Linux (initrd Debug)' {
echo 'Loading Linux Kernel ...'
linux ($enapter_root)/EFI/enapter/bzImage $common_params init_fatal_sh=true verbose=true debug=true shell-debug
echo 'Loading initial ramdisk ...'
initrd ($enapter_root)/EFI/enapter/initrd
}

menuentry 'Enapter Linux (initrd Shell)' {
echo 'Loading Linux Kernel ...'
linux ($enapter_root)/EFI/enapter/bzImage $common_params shell=after:udev init_fatal_sh=true
echo 'Loading initial ramdisk ...'
initrd ($enapter_root)/EFI/enapter/initrd
}

menuentry 'Enapter Linux (ERASE data disk)' {
echo -n "Are you sure you want to ERASE data disk? (y/N): "
read confirmation

if [ "$confirmation" != "y" -a "$confirmation" != "Y" ]; then
  echo "Action canceled. Rebooting..."
  sleep --verbose 3
  reboot
fi

echo 'Loading Linux Kernel ...'
linux ($enapter_root)/EFI/enapter/bzImage $common_params erase_data_disk
echo 'Loading initial ramdisk ...'
initrd ($enapter_root)/EFI/enapter/initrd
}

}
