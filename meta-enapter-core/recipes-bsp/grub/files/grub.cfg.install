# SPDX-FileCopyrightText: 2024 Enapter <developers@enapter.com>
# SPDX-License-Identifier: Apache-2.0

if loadfont ($root)/EFI/BOOT/unicode.pf2 ; then
  insmod all_video
  insmod gfxterm
  terminal_output gfxterm
fi

set menu_color_normal=white/black
set menu_color_highlight=black/light-gray

set ORDER="A B"
set A_OK=0
set A_TRY=0
set B_OK=0
set B_TRY=0

set default=0
set fallback=1
set timeout=2

search --set=config_disk --part-label enp-config

set env_path="($config_disk)/grubenv"

load_env --file "$env_path"

# Check if enapter_systemd_machine_id is set
if [ -n "${enapter_systemd_machine_id}" ]; then
  set systemd_bootargs="systemd.machine_id=${enapter_systemd_machine_id}"
fi

set common_params="panic=20 ${systemd_bootargs}"
export common_params

# if all retries are 0 then reset retries to 1
if [ "$A_TRY" -eq 0 -a "$B_TRY" -eq 0 ]; then
  A_TRY=1
  B_TRY=1
fi

set DISPLAY_A_TRY=A_TRY
set DISPLAY_B_TRY=B_TRY

# select bootable slot
for SLOT in $ORDER; do
  if [ "$SLOT" == "A" ]; then
    if [ "$A_TRY" -eq 0 ]; then
      A_OK=0
    fi
    if [ "$A_TRY" -ge 0 ]; then
      decrement A_TRY
    fi
    INDEX=0
    OK=$A_OK
  fi
  if [ "$SLOT" == "B" ]; then
    if [ "$B_TRY" -eq 0 ]; then
      B_OK=0
    fi
    if [ "$B_TRY" -ge 0 ]; then
      decrement B_TRY
    fi
    INDEX=1
    OK=$B_OK
  fi
  if [ "$OK" -eq 1 ]; then
      default=$INDEX
      if [ "$default" -eq 0 ]; then
        fallback=1
      else
        fallback=0
      fi
      break
  fi
done

save_env --file "$env_path" A_TRY B_TRY enapter_systemd_machine_id

if [ "$default" -eq 0 ]; then
  set active_kernel_label="enp-kernel-a"
  set active_rootfs_label="enp-root-a"
  set active_appfs_label="enp-app-a"
  set active_slot="A"
else
  set active_kernel_label="enp-kernel-b"
  set active_rootfs_label="enp-root-b"
  set active_appfs_label="enp-app-b"
  set active_slot="B"
fi

set active_slot_params="rauc.slot=${active_slot} root=PARTLABEL=${active_rootfs_label} app=PARTLABEL=${active_appfs_label}"
export active_slot_params
search --set=active_slot_kernel_disk --part-label $active_kernel_label
export active_slot_kernel_disk

########################
# Menu entries         #
########################

menuentry "Enapter Linux Slot A (OK: $A_OK, TRY: $DISPLAY_A_TRY)" {
search --set=kernel_disk --part-label enp-kernel-a

echo 'Loading Linux Kernel ...'
linux ($kernel_disk)/bzImage $common_params rauc.slot=A root=PARTLABEL=enp-root-a app=PARTLABEL=enp-app-a
echo 'Loading initial ramdisk ...'
initrd ($kernel_disk)/initrd
}

menuentry "Enapter Linux Slot B (OK: $B_OK, TRY: $DISPLAY_B_TRY)" {
search --set=kernel_disk --part-label enp-kernel-b

echo 'Loading Linux Kernel ...'
linux ($kernel_disk)/bzImage $common_params rauc.slot=B root=PARTLABEL=enp-root-b app=PARTLABEL=enp-app-b
echo 'Loading initial ramdisk ...'
initrd ($kernel_disk)/initrd
}

menuentry 'UEFI Firmware Settings' {
fwsetup
}

submenu 'Advanced Options for Enapter Linux' {

menuentry 'Enapter Linux (Safe Graphics)' {
echo 'Loading Linux Kernel ...'
linux ($active_slot_kernel_disk)/bzImage $common_params nomodeset $active_slot_params
echo 'Loading initial ramdisk ...'
initrd ($active_slot_kernel_disk)/initrd
}

menuentry 'Enapter Linux (Password Reset)' {
echo 'Loading Linux Kernel ...'
linux ($active_slot_kernel_disk)/bzImage $common_params password_reset $active_slot_params
echo 'Loading initial ramdisk ...'
initrd ($active_slot_kernel_disk)/initrd
}

menuentry 'Enapter Linux (Factory Reset)' {
echo 'Loading Linux Kernel ...'
linux ($active_slot_kernel_disk)/bzImage $common_params factory_reset $active_slot_params
echo 'Loading initial ramdisk ...'
initrd ($active_slot_kernel_disk)/initrd
}

menuentry 'Enapter Linux (initrd Debug)' {
echo 'Loading Linux Kernel ...'
linux ($active_slot_kernel_disk)/bzImage $common_params init_fatal_sh=true verbose=true debug=true shell-debug $active_slot_params
echo 'Loading initial ramdisk ...'
initrd ($active_slot_kernel_disk)/initrd
}

menuentry 'Enapter Linux (initrd Shell)' {
echo 'Loading Linux Kernel ...'
linux ($active_slot_kernel_disk)/bzImage $common_params shell=after:udev init_fatal_sh=true $active_slot_params
echo 'Loading initial ramdisk ...'
initrd ($active_slot_kernel_disk)/initrd
}

}
